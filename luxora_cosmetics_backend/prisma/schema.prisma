generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  isAdmin                Boolean           @default(false)
  encryptedEmail         String            @unique
  encryptedPhone         String?
  hashedPassword         String
  encryptedFirstName     String?
  encryptedLastName      String?
  encryptedAddressMain   String?
  encryptedAddressSecond String?
  city                   String?
  state                  String?
  zip                    String?
  country                String?
  reviews                Review[]
  wishlist                   Wishlist[]
  cart                   Cart[]
  order                  Order[]
  sessions               Sessions[]
  deletedAt              DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
}

model Product {
  id                     String            @id @default(uuid())
  isPublic               Boolean            @default(true)
  name                    String
  imageUrl          String?
  description        String?            @db.Text
  price               Float
  pricePromo         Float?
  promoStartDate         DateTime?
  promoEndDate         DateTime? 
  stock                  Int @default(-1)
  productType productType @default(skinCare)
  reviews                Review[]
  wishlistItem               WishlistItem[]
  cartItem               CartItem[]
  orderItems             OrderItem[]
  deletedAt              DateTime? // Soft delete implementation
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @default(now()) @updatedAt
}

model Review {
  id                     String            @id @default(uuid())
  productId  String
  userId     String
  text       String?  @db.VarChar(1000)
  rating     Int      @default(0) // from 0 to 4
  isPublic   Boolean  @default(true)
  isApproved Boolean  @default(false)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    deletedAt              DateTime? // Soft delete implementation
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([productId, userId])
}

model Wishlist {
id                     String            @id @default(uuid())
  userId    String            @unique
  items     WishlistItem[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model WishlistItem {
 id                     String            @id @default(uuid())
  wishlistId String
  productId  String
  quantity   Int      @default(1)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist       Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([wishlistId, productId])
}

model Cart {
id                     String            @id @default(uuid())
  userId    String        @unique
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model CartItem {
id                     String            @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([cartId, productId])
}



model Order {
 id                     String            @id @default(uuid())
  userId                 String?
  userEncryptedEmail     String? // Store user email at the time of order
  userEncryptedPhone     String? // Store user phone number
  userEncryptedFirstName String? // Store user name (firstname)
  userEncryptedLastName  String? // Store user name (lastname)

  // Delivery address details at the time of order
  userEncryptedAddressMain   String?
  userEncryptedAddressSecond String?
  deliveryMaxArrivalDate     DateTime? // in days
  deliveryCity               String?
  deliveryZip                String?

  taxRate       Float @default(0) // Tax amount for the order
  deliveryCost  Float @default(0) // Delivery cost

  status        OrderStatus   @default(created)
  paymentMethod PaymentMethod @default(cardPaid)

  transactionId   String?
  transactionInfo String? @db.Text

  items     OrderItem[]
  user      User?       @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model OrderItem {
id                     String            @id @default(uuid())
  orderId                            String // Reference to the order
  productId                          String? // Reference to the product
  productName                       String? // Store product name at the time of order
  productImageUrl                    String?
  productPrice                       Float // Store product price at the time of order
  productPricePromo                  Float? // Store product price at the time of order
  quantity                           Int                @default(1) // Quantity ordered

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId, productId])
}



model NewsletterSubscription {
  id             Int      @id @default(autoincrement())
  encryptedEmail String   @unique
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model Sessions {
  id                    String    @id @default(uuid())
  userId                String       @unique
  accessToken           String    @db.Text
  renewToken            String    @db.Text
  accessTokenExpiryTime DateTime? @default(now())
  renewTokenExpiryTime  DateTime? @default(now())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
}

enum productType {
  skinCare
  makeUp
  bathAndBody
}

enum OrderStatus {
  created
  delivering
  delivered
  refunded
  canceled
}

enum PaymentMethod {
  cardPaid
  cashOnDelivery
}
