generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int               @id @default(autoincrement())
  Elesoft_ID             Int?              @unique
  isAdmin                Boolean           @default(false)
  isVerified             Boolean           @default(false)
  Synchronise            Int?              @default(0)
  encryptedEmail         String            @unique
  encryptedPhone         String?
  hashedPassword         String
  encryptedFirstName     String?
  encryptedLastName      String?
  encryptedAddressMain   String?
  encryptedAddressSecond String?
  city                   String?
  state                  String?
  zip                    String?
  country                String?
  userPreferences        UserPreferences[]
  reviews                Review[]
  cart                   Cart[]
  wish                   Wishlist[]
  Order                  Order[]
  sessions               Sessions[]
  deletedAt              DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
}

model UserPreferences {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  emailNotifications Boolean   @default(true)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
}

model Magasin {
  id               Int            @id @default(autoincrement())
  magasinId        String         @unique @default("") @db.VarChar(10)
  isDefaultMagasin Boolean        @default(false)
  magasinName      String         @default("")
  magasinEmail     String         @default("")
  magasinHoraire   String         @default("")
  magasinAddress   String         @default("")
  magasinPhone     String         @default("")
  mapUrl           String? // map Url shows the placement of the magasin..
  Delivery         DeliveryTerms?
  ProductStock     ProductStock[]
  Order            Order[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
}

model DeliveryTerms {
  id           Int     @id @default(autoincrement())
  magasinId    Int     @unique // unique because each Magasin has specific delivery terms
  deliveryTime Int     @default(2) // in days
  cost         Float   @default(0) // cost for delivery from magasin
  magasin      Magasin @relation(fields: [magasinId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                    Int                @id @default(autoincrement())
  Art_Ean13             String             @unique
  primaryFormatIsbn     String? // Reference to another product format by ISBN
  primaryCategoryNumber Int? // Reference to the category number
  isPublic              Boolean            @default(true)
  isPreorder            Boolean            @default(false)
  authorId              Int?
  Art_Titre             String
  Art_Image_Url         String?
  Art_Editeur           String?
  Art_EtatCom           String?
  Art_DateParu          DateTime?
  Art_Description       String?            @db.Text
  Art_Prix              Float
  Art_Prix_Promo        Float?
  tax                   Float?             @default(0)
  Art_DateDPromo        DateTime?
  Art_DateFPromo        DateTime?
  Art_NmbrPages         Int?
  Art_Poids             Float?
  Art_Largeur           Decimal?           @db.Decimal(10, 0)
  Art_Hauteur           Decimal?           @db.Decimal(10, 0)
  Art_Epaisseur         Decimal?           @db.Decimal(10, 0)
  Art_Points            Int                @default(0)
  author                Author?            @relation(fields: [authorId], references: [id])
  formatType            ProductFormatType? @default(none)
  formats               Product[]          @relation("ProductFormats") // Self-relation for product formats
  categories            Category[]         @relation("CategoryProducts") // Many-to-many relationship to categories
  stock                 ProductStock[]
  reviews               Review[]
  CartItem              CartItem[]
  WishItem              WishlistItem[]
  orderItems            OrderItem[]
  parentProduct         Product?           @relation("ProductFormats", fields: [primaryFormatIsbn], references: [Art_Ean13], onDelete: Cascade)
  primaryCategory       Category?          @relation(fields: [primaryCategoryNumber], references: [categoryNumber]) // Reference to category
  deletedAt             DateTime? // Soft delete implementation
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @default(now()) @updatedAt
}

model Author {
  id             Int       @id @default(autoincrement())
  firstName      String
  lastName       String
  coverImageUrl  String? // Optional cover image of the author
  authorOfMonth  Boolean   @default(false)
  featuredAuthor Boolean   @default(true)
  products       Product[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model ProductStock {
  id          Int      @id @default(autoincrement())
  productIsbn String
  magasinId   Int
  Art_Stock   Int      @default(0)
  product     Product  @relation(fields: [productIsbn], references: [Art_Ean13], onDelete: Cascade)
  magasin     Magasin  @relation(fields: [magasinId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@unique([productIsbn, magasinId])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  text      String?  @db.VarChar(1000)
  rating    Int      @default(0) // from 0 to 4
  isPublic  Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([productId, userId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([cartId, productId])
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  userId    Int            @unique
  items     WishlistItem[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  quantity   Int      @default(1)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wish       Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([wishlistId, productId])
}

model Order {
  id                    Int          @id @default(autoincrement())
  userId                Int
  magasinId             Int
  transactionId         String?
  deliveryAddress       String?
  estimatedDeliveryDate DateTime?
  transactionInfo       String?      @db.Text
  status                OrderStatus? @default(CREATED)
  total                 Float?
  tax                   Float?       @default(0)
  Synchronise           Int?         @default(0)
  Order_Elesoft         String?      @default("")
  EntFac_Num            String?      @default("")
  FileInvoice           String?      @default("")
  Suivi                 String?      @default("En cours")
  items                 OrderItem[]
  user                  User         @relation(fields: [userId], references: [id])
  magasin               Magasin      @relation(fields: [magasinId], references: [id])
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now()) @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  RecidNum  Int?
  quantity  Int
  price     Float
  tax       Float?   @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([orderId, productId])
}

model Category {
  id              Int                   @id @default(autoincrement())
  parentId        Int?
  categoryNumber  Int                   @unique
  isPublic        Boolean               @default(true)
  promoPercent    Int?
  translations    CategoryTranslation[]
  parentCategory  Category?             @relation("SubCategory", fields: [parentId], references: [id]) // Inverse relation to the parent
  subCategories   Category[]            @relation("SubCategory") // Self-referential relation
  products        Product[]             @relation("CategoryProducts") // Many to many relationship
  primaryProducts Product[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now()) @updatedAt
}

model CategoryTranslation {
  id             Int           @id @default(autoincrement())
  categoryNumber Int
  isDefault      Boolean?
  languageCode   LanguageCode? @default(en)
  name           String

  category Category @relation(fields: [categoryNumber], references: [categoryNumber], onDelete: Cascade)
}

model SystemPreferences {
  id           Int           @id @default(autoincrement())
  showcaseType ShowcaseType? @default(TRIPLE)
  showMessages Boolean?      @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model SystemMessage {
  id        Int       @id @default(autoincrement())
  isPublic  Boolean?  @default(true)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  translations SystemMessageTranslation[]
}

model SystemMessageTranslation {
  id              Int           @id @default(autoincrement())
  systemMessageId Int
  languageCode    LanguageCode? @default(en)
  message         String        @db.Text

  systemMessage SystemMessage @relation(fields: [systemMessageId], references: [id], onDelete: Cascade)

  @@unique([systemMessageId, languageCode])
}

model ShowcaseItem {
  id        String           @id @default(uuid())
  imageUrl  String
  url       String?          @default("")
  promo     PromoShowcase?
  default   DefaultShowcase?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
}

model PromoShowcase {
  id           String       @id @default(uuid())
  itemId       String       @unique
  order        Int          @default(0)
  startDate    DateTime?    @default(now())
  endDate      DateTime?
  showcaseItem ShowcaseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model DefaultShowcase {
  id           String       @id @default(uuid())
  itemId       String       @unique
  order        Int          @default(0)
  showcaseItem ShowcaseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model NewsletterSubscription {
  id             Int      @id @default(autoincrement())
  encryptedEmail String   @unique
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model Sessions {
  id                    String    @id @default(uuid())
  userId                Int       @unique
  accessToken           String    @db.Text
  renewToken            String    @db.Text
  accessTokenExpiryTime DateTime? @default(now())
  renewTokenExpiryTime  DateTime? @default(now())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
}

enum OrderStatus {
  CREATED
  PAID
  PREPARING
  DELIVERING
  PARTLY_DELIVERED
  DELIVERED
  ERRORED
}

enum ShowcaseType {
  TRIPLE
  SINGLE
}

enum LanguageCode {
  en
  fr
  de
  ar
}

enum ProductFormatType {
  none
  compact
  grand
  paperback
  hardcover
  ebook
  audio
}
